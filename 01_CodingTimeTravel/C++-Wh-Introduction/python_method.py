#python 求解鸡兔同笼
#1.运用代数（解方程）的方法来求鸡兔同笼问题
#条件： 适用于已知鸡和兔的总数量以及总的脚的数量的情况。
#使用场景： 当问题中提供了足够的信息，可以建立方程组并通过代数运算求解鸡和兔的数量。
# 这种方法更适用于具有明确的数学模型和方程的问题。

total_quantity = 10 #鸡和兔的总数量
total_feet = 32#总的脚的数量

 #解方程组  //为了方便我们看 我们先用b来表示rabbits a表示chikins
 #2a + 4b = total_feet
 #a + b = total_quantity
 #解得 a = total_quantity - b
 #2(total_quantity - b) + 4b = total_feet
 #2 * total_quantity - 2b + 4b = total_feet
 #b = (total_feet - 2 * total_quantity) / 2

# 根据第一个方程解出兔的数量
# 在Python中，// 是整数除法运算符，它返回商的整数部分，而不是四舍五入得到的浮点数。
## 如果使用单斜杠 / 进行普通除法，得到的是浮点数（小数）
#这里用单斜杠 是因为得到的腿数量一定为偶数
#所以用//与/都一样
rabbits = (total_feet - 2 * total_quantity) / 2

# 鸡的数量=总数量-兔子的数量
chickens = total_quantity - rabbits

# 打印结果
print(f"第一段代码：\n鸡的数量：{chickens}，兔的数量：{rabbits}")

#2.利用穷举法（循环试数）的方法
#条件： 适用于不知道鸡和兔的总数量的情况，只知道它们的总脚的数量。
#使用场景： 当问题较为简单，无法直接建立方程组时，可以通过循环尝试不同的数量组合来找到符合条件的解
# 这种方法更适用于问题相对较小且不便于建立代数方程的情况。

#创建变量来存储动物的总的脚的数量
total_feet = 18

# 初始化鸡和兔的数量为0
chickens = 0
rabbits = 0

print(f"第二段代码：")
#这是一个循环的开始，它将从 chicken 的值为 0 开始，一直循环到 total_feet / 2，每次递增 1。
#这个循环用来尝试所有可能的鸡的数量。
#使用 // 运算符：total_feet // 2 是为了确保循环范围为整数
# 由于鸡和兔的数量应该是整数，因此使用整数除法更合适。
for chicken in range(total_feet // 2 + 1):#由于range函数的特性，它不包含最后一个数，所以我们需要加上+1 使其尝试最后一个数

# 计算在当前尝试的鸡的数量对应的兔的数量
# 脚的数量=鸡的数量*2+兔的数量*4
    rabbit = (total_feet - 2 * chicken) // 4 #

    #检查是否满足条件：这是为了确保找到的鸡和兔的组合满足问题的约束条件。
    # 在这个问题中，根据鸡和兔的数量计算它们的总脚数，并检查是否等于给定的总脚数。
    #这是因为可能存在多个鸡和兔的组合，但只有其中的一些是满足条件的，
    # 因为//得到的是整除的后的数量 并不是真正的数量
    # 所以需要通过检查脚的总数来验证是否是符合要求的组合。

    if 2 * chicken + 4 * rabbit == total_feet:
        # 打印结果
        print(f"鸡的数量：{chicken}，兔的数量：{rabbit}")


